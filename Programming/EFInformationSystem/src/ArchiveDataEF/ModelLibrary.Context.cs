//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArchiveDataEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEArchiveEntities : DbContext
    {
        public DBEArchiveEntities()
            : base("name=DBEArchiveEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Archive> Archives { get; set; }
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<AuthorsOfPublication> AuthorsOfPublications { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<Publication> Publications { get; set; }
    
        [DbFunction("DBEArchiveEntities", "AuthorsOfPub")]
        public virtual IQueryable<AuthorsOfPub_Result> AuthorsOfPub(Nullable<int> pub_id)
        {
            var pub_idParameter = pub_id.HasValue ?
                new ObjectParameter("pub_id", pub_id) :
                new ObjectParameter("pub_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AuthorsOfPub_Result>("[DBEArchiveEntities].[AuthorsOfPub](@pub_id)", pub_idParameter);
        }
    }
}
